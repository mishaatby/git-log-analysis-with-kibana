input {

	file {
		# parse multiline messages (as usual, java error's callstack)
		codec => multiline {
			pattern => "^%{TIMESTAMP_ISO8601} "
			what => "previous"
			negate => "true"
		}
		path => "d:/temp/elk/git/data/*log*" #path to solr log
		start_position => beginning
		ignore_older => 0 #do not ignore old messages (default - ignore older than 24 hours)
		sincedb_path => "NUL" #for debug - reading entire file
		type => "git"
	}

}

filter {
	grok {
		match => { "message" => "%{TIMESTAMP_ISO8601:log_timestamp} %{NOTSPACE:timeshift} %{WORD:hash} a=%{GREEDYDATA:author} e=%{GREEDYDATA:email} s=%{GREEDYDATA:comment} f=%{GREEDYDATA:files_temp}" }
		tag_on_failure => ["_grokfailed_message"]
	}

	mutate {
		gsub => ["files_temp", "\n", "____"]
		split => { "files_temp" => "____" }
	}

	ruby {
		code => "
			added_lines = 0
			removed_lines = 0

			file_list = event['files_temp']

			if (file_list.nil?)
				event['merge'] = true;
			else
				event['merge'] = false;
				file_list2 = []
				file_list.each { |file|
					if file.length < 5
						next
					end
					details = file.split(/\t/)
					added = details[0]
					if added == '-'
						 added = 0
					else
						added = added.to_i
					end
					removed = details[1]
					if removed == '-'
						 removed = 0
					else
						removed = removed.to_i
					end

					added_lines += added
					removed_lines += removed
					file_obj = Hash.new
					file_obj['name'] = details[2]
					file_obj['added'] = added
					file_obj['removed'] = removed
					file_list2.push(file_obj)
				}
				event['added_lines'] = added_lines
				event['removed_lines'] = removed_lines
				event['files'] = file_list2
			end

		"
	}

	date {
		timezone => "UTC"
		match => [ "log_timestamp", "YYYY-MM-dd HH:mm:ss" ]
	}

	mutate {
		 remove_field => "files_temp"
		 remove_field => "log_timestamp"
		 remove_field => "timeshift"
	}

	# bug / requirement / unknown
	# most changed files
}

output {
	if ("_grokfailed_message" not in [tags]) and ("_rubyexception" not in [tags]) {
		elasticsearch {
		#	#hosts => ["localhost:9200"]
		#	index => "git2-test1" #default elastic index
		#	#document_type => "logs" #default elastic type
		}

		#stdout { codec => rubydebug } #for console debug
		#stdout { codec => dots }
		file { path => "d:\temp\elk\git\git.out" codec => rubydebug } #for output file debug
	}
	else {
		file { path => "d:\temp\elk\git\parse-errors.out" codec => rubydebug } #for output file debug
	}
}
